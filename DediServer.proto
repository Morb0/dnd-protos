syntax = "proto3";

package DC.Packet;

import "_Item.proto";

option java_multiple_files = false;
option java_outer_classname = "dediServer";
option java_package = "com.packets.dediServer";

message S2C_GameEnterUser_Json {
    string restUrl = 1;
    bytes nickName = 2;
    bytes streamingNickName = 3;
    string characterClass = 4;
    string characterId = 5;
    uint32 gender = 6;
    uint32 level = 7;
    string partyId = 8;
}

message GameExitAdvPoint {
    uint32 advPointType = 1;
    uint32 advPoint = 2;
}

message GameExitExpPoint {
    uint32 expPointType = 1;
    uint32 expPoint = 2;
}

message Killlog {
    string instigatorAccountId = 1;
    string instigatorName = 2;
    string effectCauserName = 3;
    uint32 hitBoxType = 4;
}

message MonsterKillLog {
    string monsterName = 1;
    uint32 monsterKillCount = 2;
}

message C2S_GameExitUser_POST {
    uint32 escape = 1;
    string accountId = 2;
    string characterId = 3;
    uint64 gameId = 4;
    repeated SItem items = 5;
    repeated SItem guaranteedItems = 6;
    string characterClass = 7;
    uint32 killCount = 8;
    repeated GameExitAdvPoint advPoints = 9;
    string escapeMapName = 10;
    string reason = 11;
    repeated GameExitExpPoint expPoints = 12;
    repeated Killlog killLogData = 13;
    repeated MonsterKillLog monsterKillLogs = 14;
    uint32 gameDifficultyType = 15;
    uint32 needBlock = 16;
    
    enum ESCAPE {
        NONE = 0;
        SUCCESS = 1;
        FAIL = 2;
    }
}

message C2S_GameEnterUser_Post {
    string accountId = 1;
    string characterId = 2;
    uint64 gameId = 3;
    uint32 isSuccess = 4;
}

message StartGameSessionDataDiscrepancy {
    uint32 movementTimeDiscrepancyDetection = 1;
    uint32 movementTimeDiscrepancyResolution = 2;
    float movementTimeDiscrepancyMaxTimeMargin = 3;
    float movementTimeDiscrepancyMinTimeMargin = 4;
    float movementTimeDiscrepancyResolutionRate = 5;
    float movementTimeDiscrepancyDriftAllowance = 6;
    uint32 movementTimeDiscrepancyForceCorrectionsDuringResolution = 7;
}

message StartGameSessionDataHackPolicy {
    uint32 hack_iron_shield_scan_speed_hack = 1;
    uint32 hack_iron_shield_scan_dll_injection = 2;
    uint32 hack_movement_scan = 3;
    uint32 hack_melee_attack_scan = 4;
    uint32 hack_invalid_item_scan = 5;
    uint32 hack_interaction_scan = 6;
}

message S2C_GameStartServer_Json {
    string restUrl = 1;
    uint64 gameId = 2;
    uint32 maxGameUser = 3;
    uint32 waitTimeSec = 4;
    StartGameSessionDataDiscrepancy discrepancy = 5;
    uint32 gameHackPolicy = 6;
    uint32 validPlayerMeleeAttackRange = 7;
    uint32 gameDifficultyType = 8;
    uint32 shippingLogOnOffPolicy = 9;
    uint32 shippingLogLevelPolicy = 10;
    uint32 gmOnOffPolicy = 11;
    uint32 allowed_interaction_policy = 12;
    float allowed_interaction_distance = 13;
    float allowed_interaction_xy_distance = 14;
    StartGameSessionDataHackPolicy hackPolicy = 15;
}

message C2S_GameEndServer_POST {
    repeated GameEndUserInfo users = 1;
    uint64 gameId = 2;
}

message GameEndUserInfo {
    string accountId = 1;
    uint32 kill = 2;
    uint32 death = 3;
}

message C2S_GameStart_POST {
    uint64 gameId = 1;
    repeated string mapNames = 2;
}

message C2S_GameCharacterInfo_Get {
    uint64 gameId = 1;
    string accountId = 2;
    string characterId = 3;
}

message S2C_GameCharacterInfo_Json {
    uint64 gameId = 1;
    string accountId = 2;
    string characterId = 3;
    repeated SItem items = 4;
    repeated SPerk perks = 5;
    repeated SSkill skills = 6;
    repeated SSpell spells = 7;
    repeated string characterSkinIds = 8;
    repeated string itemSkinIds = 9;
    repeated SEMOTE emotes = 10;
}

message C2S_GameAliveCheck_GET {
    uint64 gameId = 1;
}

message AliveDataInfo {
    string Id = 1;
    repeated string Us = 2;
}

message C2S_AliveAppendData_GET {
    string Gs = 1;
    repeated AliveDataInfo infos = 2;
}

message C2S_GameInterrupt_POST {
    uint64 gameId = 1;
}
